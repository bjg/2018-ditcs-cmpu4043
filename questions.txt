Question 1.
Explain what is meant by stream abstraction. What is the relationship between streams and the observer pattern? What are streams useful for modelling and when might you use them in Rich Web Development?
Stream abstraction allows the programmer to work and model asynchronous data that comes at unknown time and is not usually available at the runtime to the application. It is also of unknown size. They allow to work with data that could but not necessarily be available to the program during its lifetime. It can be compared to an array, with the difference being the fact that you don’t know its size and when you will have the data available. 
Observer pattern describes the way an Observer and Observable in RxJS provides a solution of dealing with the values from the stream. It helps define the response to these emitted values. The Observer here represents the class that receives the stream and Observable represents the provider of the stream. This pattern basically provides a way to represent these asynchronous streams containing data. 
Streams will be useful when you don’t know the time of arrival of your data inputs and also their size. This is why they were useful in our lab, as we didn’t know the arrival of data, in our case the button or the keys clicks we used those streams to model and contain the input and code the way they should be dealt with on arrival.

Question 2. 
Assume that you are building an interface to an API in your Rich Web App. Describe in detail how you could use the RxJS library to handle asynchronous network responses to API requests. In your opinion, what are the benefits to using a streams library for networking over, say, promises? And what do you think are the downsides?
You can use the RxJS library to process the network requests/responses as streams and deal with them accordingly using the Observer pattern as they are a perfect example of asynchronous data, which is provided at an unknown time with unknown at the start size.
If I were to build such an application with the RxJS library I would first create an Observer, to create a stream or a flow of data that is being requested. I would then proceed into using the subscribe method to manipulate and display the requested data in a suitable way. The advantages of using the stream way instead of promises is the assurance of no synchronization problems, although they do consume more resources. As well as importing extra libraries, even if we import only the essential functions it will still put a great load on the server. For example, as I was building my program using rxjs I kept getting warnings that my application exceeds the load limits and I could feel it took it some time every time I had to refresh it. This together with the need to including a module builder for it to work, takes a tool on the server as I was able to see first hand. 
