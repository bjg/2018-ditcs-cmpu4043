Question: Explain what is meant by the stream abstraction. What is the relationship between streams and the observer pattern?  What are streams useful for modeling and when might you use them in Rich Web development?

Answer: A stream abstraction is nothing more than a sequence of data (like a conveyor belt). Items within the stream can be processed one after the other and not all in a single batch. Steams are very useful when it comes to modelling asynchronous data sources and can be used when handling events such as button clicks or callbacks in Rich Web Development.


Question: Assume that you are building an interface to an API in your Rich Web App. Describe in detail how you could use the RxJS library to handle asynchronous network responses to API requests. In your opinion, what are the benefits to using a streams library for networking over, say, promises? And what do you think are the downsides?

Answer: Make the request via http call, handle the response as a stream, subscribe to the stream and display the data to the user. e.g:

const request$ = Observable.just('https://api.github.com/users');

const response$ = request$
  .flatMap(requestUrl =>
    Observable.fromPromise(fetch(requestUrl))
  );

response$.subscribe(response => {
  // render `response` to the DOM however you wish
});

Promises solve the specific drawbacks with callbacks and are ok, but promises donâ€™t really help with the larger data synchronisation problem we face in UI design and implementation. Using streams everywhere allows the application architecture to reduce to a stream processing problem operating on a merged set of one or more data streams.
