Question: Assume that you are building an interface to an API in your Rich Web App. Describe in detail how you could use the RxJS library to handle asynchronous network responses to API requests. In your opinion, what are the benefits to using a streams library for networking over, say, promises? And what do you think are the downsides?

The RxJS library could be used very effectively in a scenario such as this. As it is unknown how long it will take for network responses to return with the desired data, it is good practice to use an asynchronous approach to handle this data to ensure a smooth user experience. Should an asynch. approach not be used, this would cause the application to freeze up until the network response was received and as delays in software over 100 milliseconds are perceptible to a user, anything over this value is unacceptable for friendly UI design.

The RxJS library in particular would be of great use. Separate streams could be set up for user input, either via the mouse or keyboard and separate streams can be used for remote requests. These two categories of streams can be merged into single streams to further stream-line their use.

When it comes to using streams over promises, it is generally okay to use either when it comes to a few elements such as buttons in a DOM or single requests to a server. However, when the number of moving parts e.g. many buttons or many different requests with a variety of different data types capable of being returned, it becomes more and more cumbersome to use promises only. It is at this point that streams can be used more efficiently. It is also much more desirable to use streams in a scenario such as this one as streams are much easier to maintain from a code maintenance point of view. It is also easier to reuse code for streams in limited situations.

The drawbacks for some developers can include their inherent unreliability. RxJS as an external library is updated very frequently and this has to be maintained more often due to these changes as opposed to a concept like promises which are a part of the JavaScript API and are here to stay. The concept of streams can also be trickier to deal with than with promises.
