Question:
Assume that you are building an interface to an API in your Rich Web App. Describe in detail how you could use the RxJS library to handle asynchronous network responses to API requests. In your opinion, what are the benefits to using a streams library for networking over, say, promises? And what do you think are the downsides?

Answer:
I would take an approach based on grouping all the calls into one stream. An observable can be made for each API call and the handling logic can be attached so that is triggered when the occurence of the API response is made available. Two approaches you could take are having a single observable be created and finish once it has recieved the full netwrok response for that call, or group all of tehm into one stream so it is only the one that needs to be 'watched'. As I said above I believe this is the better approach as it is easier to process responses this way as you can focus on a single method/area of input.

The problem with promises are that they can only handle a single value from a response and can cause slow down due to waits when expecting multiple responses from promises. Streams solve this issue by holding an ever growing array of responses and having event handling ready for whatever response arrives no matter the order. Also streams have all the usual array manipulation methods available from javascript so that improves their usability and handling. A negative for streams however is that they rely on external libraries meaning you can have compatibility issues and another dependency for future project updates. A small note is that it can be more difficult to debug code with streams as they are far more complex and difficult to view than your typical array.