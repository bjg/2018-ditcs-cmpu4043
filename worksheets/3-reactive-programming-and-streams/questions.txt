Q:	Explain what is meant by the stream abstraction. 
	What is the relationship between streams and the observer pattern?  
	What are streams useful for modeling and when might you use them in Rich Web development?

A:	Streams are are sequences of data made available over time, where actions can be set to run based on the data received in the stream.
Once a bit of data is received, it is then essentially forgotten.
An observer pattern provides a method that allows an action to be made based on a trigger.  It is in a sense similar but a more simpler version of the reactive stream.
Streams are useful in rich web for applications where potentially, an unlimited amount of data needs to be observed in one sequence at a time.


Q:	Assume that you are building an interface to an API in your Rich Web App. 
	Describe in detail how you could use the RxJS library to handle asynchronous network responses to API requests. 
	In your opinion, what are the benefits to using a streams library for networking over, say, promises? And what do you think are the downsides?
	
A:	The RxJS library could be used for handling async responses by creating an observable, 
which would be used for monitoring the requests, subscribing to it, and performing actions based on the data received from the observable stream.
Filtering and mapping the stream could also prove effective for various responses.

Benefits of using streams library is that it offers the same functionality as a promise and much more.
An observable can handle numerous events, can be cancelled, unlike promises.
Downsides of RxJS is its complexity and learning curve, and debugging streams is a lot more tedious than promises.