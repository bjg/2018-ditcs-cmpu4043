1.	Explain what is meant by the stream abstraction. What is the relationship between streams and the observer pattern?  
What are streams useful for modelling and when might you use them in Rich Web development?


•	A Stream is the abstraction of ongoing events ordered in time. Instead of loading all the incoming data in memory, stream abstraction allow us to process it in a more granular and ordered way.
•	Streams implement the observer pattern. Streams will notify the system of any state changes and update any dependant objects
•	Streams are useful in Rich Web development as an abstraction of asynchronous events. We can carry out functions such as map or pipe into the incoming events for better efficiency.


2.	Assume that you are building an interface to an API in your Rich Web App. 
Describe in detail how you could use the RxJS library to handle asynchronous network responses to API requests. 
In your opinion, what are the benefits to using a streams library for networking over, say, promises? And what do you think are the downsides?


In order to handle asynchronous network responses from an API using RxJS, we need to handle all the calls as streams using fromEvent() first. 
Then we can perform operations like map, reduce the same way we handled promises in the previous lab. 
Moreover, all the API call stream can be merged into one big stream. Finally, we need to subscribe to this event so that we can perform any DOM manipulation needed and update dependant components.

Promises can only handle one value while streams are able to deal with a list of them, Promises solve the specific drawbacks with call-backs and are fine per se but promises don’t really help with the larger data synchronisation problem we face in UI design and implementation.

One of the downside could be is that you need third party libraries in order to implement streams in JavaScript, this could lead to incompatibility problems if multiple libraries are used at the same time. Also, creating complex streams make the code less readable.
