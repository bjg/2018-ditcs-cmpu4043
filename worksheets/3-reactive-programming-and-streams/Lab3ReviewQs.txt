1) Explain what is meant by the stream abstraction. What is the relationship between streams and the observer pattern? Why are streams useful for modeling and when might you use them in Rich Web development?

First of all, an abstraction is the act of representing essential features without including the background details or explanations.
Streams are an abstraction used when reading or writing files. Streams are a useful abstraction due to it being able to describe files, but also terminal input/output.

The observer pattern is a design pattern in which an object has a list of dependents, called the observers, and notifies all them automatically when any of the state changes, usually by calling one of their methods.
Streams extends this observer pattern, instead of firing one action on a single event, with streams, you can create and subscribe for such events, and set multiple actions to run based on the events that occur in that stream.

If there is state synchronization problem, streams are a possible solution to this problem, by providing a unified abstraction of everything.
If we use stream everywhere, the application architecture is reduced to a stream processing problem on a combined set of one or more data streams.
We can then process state changes within the same logical structure using the same semantics.

Events, messages, calls, and even failures are going to be conveyed by a data stream which serves as the spine of one's application.
Streams are useful for reactive programming (asynchronous programming) especially as it allows the developer to observe the streams and react when value is emitted.


2) Assume that you are building an interface to an API in your Rich Web App. Describe in detail how you could use the RxJS library to handle asynchronous network responses to API requests.
In your opinion, what are the benefits to using a streams library for networking over, say, promises? And what do you think are the downsides?

Here are some note-worthy aspects of the RxJs library:
RxJS is a library for reactive programming using Observables, to make it easier to compose asynchronous or callback-based code.
RxJS is useful for handling network responses for an interface to an API by creating the observable stream that interacts with any events going on with the interface, for example, a HTTP request firing off.
RxJS provides many functions that can create observables out of promises (fromPromise), counters (interval) or events (fromEvent).

There are also multiple operators which are functions that build on the observables foundations that enables manipulation of data. For example, there are map(), filter(), concat() and flatMap().
Another extremely helpful function is called "pipe()", which links operators together. There is also error handling provided by RxJS, "error()".

With the use of RxJS libraries, Promises and streams can be used together which offers tons of ability for the callback.
However in our case, I think it is more ideal to create multiple synchronous calls one after the other.


Stream libraries for networking:
The benefits
  +code sharing and reuse
  +error handling functions
	+handles asynchronous network responses and requests seamlessly


The downsides
	+Callback hell
	+Single-threaded environment
	+Difficult to implemen
