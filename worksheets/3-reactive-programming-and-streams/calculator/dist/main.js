!function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=2)}([function(t,n,r){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)};function o(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function i(t){return"function"==typeof t}var u=!1,s={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;u=t},get useDeprecatedSynchronousErrorHandling(){return u}};function c(t){setTimeout(function(){throw t})}var a={closed:!0,next:function(t){},error:function(t){if(s.useDeprecatedSynchronousErrorHandling)throw t;c(t)},complete:function(){}},f=Array.isArray||function(t){return t&&"number"==typeof t.length};function p(t){return null!=t&&"object"==typeof t}var l,b={e:{}};function d(){try{return l.apply(this,arguments)}catch(t){return b.e=t,b}}function h(t){return l=t,d}function y(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,n){return n+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}y.prototype=Object.create(Error.prototype);var _=y,v=function(){function t(t){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var t,n=!1;if(!this.closed){var r=this._parent,e=this._parents,o=this._unsubscribe,u=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var s=-1,c=e?e.length:0;r;)r.remove(this),r=++s<c&&e[s]||null;if(i(o))h(o).call(this)===b&&(n=!0,t=t||(b.e instanceof _?m(b.e.errors):[b.e]));if(f(u))for(s=-1,c=u.length;++s<c;){var a=u[s];if(p(a))if(h(a.unsubscribe).call(a)===b){n=!0,t=t||[];var l=b.e;l instanceof _?t=t.concat(m(l.errors)):t.push(l)}}if(n)throw new _(t)}},t.prototype.add=function(n){if(!n||n===t.EMPTY)return t.EMPTY;if(n===this)return this;var r=n;switch(typeof n){case"function":r=new t(n);case"object":if(r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if("function"!=typeof r._addParent){var e=r;(r=new t)._subscriptions=[e]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}return(this._subscriptions||(this._subscriptions=[])).push(r),r._addParent(this),r},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var r=n.indexOf(t);-1!==r&&n.splice(r,1)}},t.prototype._addParent=function(t){var n=this._parent,r=this._parents;n&&n!==t?r?-1===r.indexOf(t)&&r.push(t):this._parents=[t]:this._parent=t},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function m(t){return t.reduce(function(t,n){return t.concat(n instanceof _?n.errors:n)},[])}var E="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),g=function(t){function n(r,e,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,i._parentSubscription=null,arguments.length){case 0:i.destination=a;break;case 1:if(!r){i.destination=a;break}if("object"==typeof r){r instanceof n?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new w(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new w(i,r,e,o)}return i}return o(n,t),n.prototype[E]=function(){return this},n.create=function(t,r,e){var o=new n(t,r,e);return o.syncErrorThrowable=!1,o},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parent,n=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=t,this._parents=n,this._parentSubscription=null,this},n}(v),w=function(t){function n(n,r,e,o){var u,s=t.call(this)||this;s._parentSubscriber=n;var c=s;return i(r)?u=r:r&&(u=r.next,e=r.error,o=r.complete,r!==a&&(i((c=Object.create(r)).unsubscribe)&&s.add(c.unsubscribe.bind(c)),c.unsubscribe=s.unsubscribe.bind(s))),s._context=c,s._next=u,s._error=e,s._complete=o,s}return o(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;s.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,r=s.useDeprecatedSynchronousErrorHandling;if(this._error)r&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)r?(n.syncErrorValue=t,n.syncErrorThrown=!0):c(t),this.unsubscribe();else{if(this.unsubscribe(),r)throw t;c(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};s.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),s.useDeprecatedSynchronousErrorHandling)throw t;c(t)}},n.prototype.__tryOrSetError=function(t,n,r){if(!s.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,r)}catch(n){return s.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(c(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(g);var x="function"==typeof Symbol&&Symbol.observable||"@@observable";function S(){}function O(t){return t?1===t.length?t[0]:function(n){return t.reduce(function(t,n){return n(t)},n)}:S}var T=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var r=new t;return r.source=this,r.operator=n,r},t.prototype.subscribe=function(t,n,r){var e=this.operator,o=function(t,n,r){if(t){if(t instanceof g)return t;if(t[E])return t[E]()}return t||n||r?new g(t,n,r):new g(a)}(t,n,r);if(e?e.call(o,this.source):o.add(this.source||s.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),s.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){s.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),!function(t){for(;t;){var n=t,r=n.closed,e=n.destination,o=n.isStopped;if(r||o)return!1;t=e&&e instanceof g?e:null}return!0}(t)?console.warn(n):t.error(n)}},t.prototype.forEach=function(t,n){var r=this;return new(n=j(n))(function(n,e){var o;o=r.subscribe(function(n){try{t(n)}catch(t){e(t),o&&o.unsubscribe()}},e,n)})},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[x]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:O(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=j(t))(function(t,r){var e;n.subscribe(function(t){return e=t},function(t){return r(t)},function(){return t(e)})})},t.create=function(n){return new t(n)},t}();function j(t){if(t||(t=s.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var C=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new L(t,this.project,this.thisArg))},t}(),L=function(t){function n(n,r,e){var o=t.call(this,n)||this;return o.project=r,o.count=0,o.thisArg=e||o,o}return o(n,t),n.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(g);r.d(n,"a",function(){return M});Object.prototype.toString;function M(t,n,r,e){return i(r)&&(e=r,r=void 0),e?M(t,n,r).pipe(function(t,n){return function(r){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return r.lift(new C(t,n))}}(function(t){return f(t)?e.apply(void 0,t):e(t)})):new T(function(e){!function t(n,r,e,o,i){var u;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(n)){var s=n;n.addEventListener(r,e,i),u=function(){return s.removeEventListener(r,e,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(n)){var c=n;n.on(r,e),u=function(){return c.off(r,e)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(n)){var a=n;n.addListener(r,e),u=function(){return a.removeListener(r,e)}}else{if(!n||!n.length)throw new TypeError("Invalid event target");for(var f=0,p=n.length;f<p;f++)t(n[f],r,e,o,i)}o.add(u)}(t,n,function(t){arguments.length>1?e.next(Array.prototype.slice.call(arguments)):e.next(t)},e,r)})}},function(module,__webpack_exports__,__webpack_require__){"use strict";var rxjs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),_style_css__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),_style_css__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_style_css__WEBPACK_IMPORTED_MODULE_1__);function Calculator(){const t=drawCalculator(),n=document.createElement("div");return n.appendChild(t),run(t),n.classList.add("container"),n}function run(t){for(let n=1;n<19;n++){let r=t.children[n];rxjs__WEBPACK_IMPORTED_MODULE_0__.a(r,"click").subscribe(function(){main(r.value)})}let n=t.children[20],r=t.children[19];(n=rxjs__WEBPACK_IMPORTED_MODULE_0__.a(n,"click")).subscribe(function(){equals(buffer1)}),(r=rxjs__WEBPACK_IMPORTED_MODULE_0__.a(r,"click")).subscribe(function(){clearAll()}),rxjs__WEBPACK_IMPORTED_MODULE_0__.a(document,"keypress").subscribe(function(){let t=event.keyCode;console.log(t),"="===String.fromCharCode(t)?equals(buffer1):"c"===String.fromCharCode(t)||"C"===String.fromCharCode(t)?clearAll():main(String.fromCharCode(t))})}function drawCalculator(){const t=document.createElement("div");return t.id="outer",t.innerHTML='\t<div id="screen">\n\t\t<h1 id="display">0</h1>\n\t</div>\n\t\n\t<button id="button1" value="("> <p>(</p> </button>\n\t<button id="button2" value=")"> <p>)</p> </button>\n\t<button id="button3" value="+-"> <p>±</p> </button>\n\t<button id="button4" value="/"> <p>÷</p> </button>\n\n\t<button id="button5" value="7"> <p>7</p> </button>\n\t<button id="button6" value="8"> <p>8</p> </button>\n    <button id="button7" value="9"> <p>9</p> </button>\n\t<button id="button8" value="*"> <p>x</p> </button>\n\n\t<button id="button9" value="4"> <p>4</p> </button>\n\t<button id="button10" value="5"> <p>5</p> </button>\n\t<button id="button11" value="6"> <p>6</p> </button>\n\t<button id="button12" value="-"> <p>-</p> </button>\n\n\t<button id="button13" value="1"> <p>1</p> </button>\n\t<button id="button14" value="2"> <p>2</p> </button>\n\t<button id="button15" value="3"> <p>3</p> </button>\n\t<button id="button16" value="+"> <p>+</p> </button>\n\n\t<button id="button17" value="0"> <p>0</p> </button>\n\t<button id="button18" value="."> <p>.</p> </button>\n\t<button id="button19" value="clear"> <p>C</p> </button>\n\t<button id="button20" value="equals"> <p>=</p> </button>',t}let buffer1="";function main(t){update(buffer1+=t)}function equals(buffer){try{document.getElementById("display").innerText=eval(buffer),buffer1=eval(buffer)}catch(t){document.getElementById("display").innerHTML="0",buffer1=""}}function update(t){document.getElementById("display").innerHTML=t}function clearAll(){buffer1="",document.getElementById("display").innerHTML="0"}__webpack_exports__.a=Calculator},function(t,n,r){"use strict";r.r(n);var e=r(1);document.querySelector("#app").appendChild(Object(e.a)())},function(t,n,r){var e=r(4);"string"==typeof e&&(e=[[t.i,e,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(6)(e,o);e.locals&&(t.exports=e.locals)},function(t,n,r){(t.exports=r(5)(!1)).push([t.i,"body{\n  background:#edeeef;\n}\n#outer {\n  border-radius: 25px;\n  border: 2px solid black;\n  padding: 20px;\n  width: 350px;\n  height: 300px;\n}\n#screen {\n  background:white;\n  border-radius: 15px;\n  border: 5px inset;\n  margin-bottom:20px;\n  padding:10px;\n  width: 320px;\n  height: 50px;\n  text-align:right;\n}\n#screen h1{\n  font-family: Arial, serif;\n  font-size:40px;\n  margin: 0;\n}\nbutton {\n  background:#d6d9db;\n  border-radius: 5px;\n  border: 2px outset;\n  width: 70px;\n  height: 30px;\n  text-align:center;\n  margin:5px;\n}\np{\n  font-family: Arial, serif;\n  font-size:20px;\n  margin: 0;\n}",""])},function(t,n){t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var r=function(t,n){var r=t[1]||"",e=t[3];if(!e)return r;if(n&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(e),i=e.sources.map(function(t){return"/*# sourceURL="+e.sourceRoot+t+" */"});return[r].concat(i).concat([o]).join("\n")}return[r].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+r+"}":r}).join("")},n.i=function(t,r){"string"==typeof t&&(t=[[null,t,""]]);for(var e={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(e[i]=!0)}for(o=0;o<t.length;o++){var u=t[o];"number"==typeof u[0]&&e[u[0]]||(r&&!u[2]?u[2]=r:r&&(u[2]="("+u[2]+") and ("+r+")"),n.push(u))}},n}},function(t,n,r){var e={},o=function(t){var n;return function(){return void 0===n&&(n=t.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),i=function(t){var n={};return function(t,r){if("function"==typeof t)return t();if(void 0===n[t]){var e=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}}(),u=null,s=0,c=[],a=r(7);function f(t,n){for(var r=0;r<t.length;r++){var o=t[r],i=e[o.id];if(i){i.refs++;for(var u=0;u<i.parts.length;u++)i.parts[u](o.parts[u]);for(;u<o.parts.length;u++)i.parts.push(y(o.parts[u],n))}else{var s=[];for(u=0;u<o.parts.length;u++)s.push(y(o.parts[u],n));e[o.id]={id:o.id,refs:1,parts:s}}}}function p(t,n){for(var r=[],e={},o=0;o<t.length;o++){var i=t[o],u=n.base?i[0]+n.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};e[u]?e[u].parts.push(s):r.push(e[u]={id:u,parts:[s]})}return r}function l(t,n){var r=i(t.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var e=c[c.length-1];if("top"===t.insertAt)e?e.nextSibling?r.insertBefore(n,e.nextSibling):r.appendChild(n):r.insertBefore(n,r.firstChild),c.push(n);else if("bottom"===t.insertAt)r.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(t.insertAt.before,r);r.insertBefore(n,o)}}function b(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=c.indexOf(t);n>=0&&c.splice(n,1)}function d(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var e=function(){0;return r.nc}();e&&(t.attrs.nonce=e)}return h(n,t.attrs),l(t,n),n}function h(t,n){Object.keys(n).forEach(function(r){t.setAttribute(r,n[r])})}function y(t,n){var r,e,o,i;if(n.transform&&t.css){if(!(i="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=i}if(n.singleton){var c=s++;r=u||(u=d(n)),e=v.bind(null,r,c,!1),o=v.bind(null,r,c,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",h(n,t.attrs),l(t,n),n}(n),e=function(t,n,r){var e=r.css,o=r.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(e=a(e));o&&(e+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var u=new Blob([e],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(u),s&&URL.revokeObjectURL(s)}.bind(null,r,n),o=function(){b(r),r.href&&URL.revokeObjectURL(r.href)}):(r=d(n),e=function(t,n){var r=n.css,e=n.media;e&&t.setAttribute("media",e);if(t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}.bind(null,r),o=function(){b(r)});return e(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;e(t=n)}else o()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=o()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var r=p(t,n);return f(r,n),function(t){for(var o=[],i=0;i<r.length;i++){var u=r[i];(s=e[u.id]).refs--,o.push(s)}t&&f(p(t,n),n);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete e[s.id]}}}};var _=function(){var t=[];return function(n,r){return t[n]=r,t.filter(Boolean).join("\n")}}();function v(t,n,r,e){var o=r?"":e.css;if(t.styleSheet)t.styleSheet.cssText=_(n,o);else{var i=document.createTextNode(o),u=t.childNodes;u[n]&&t.removeChild(u[n]),u.length?t.insertBefore(i,u[n]):t.appendChild(i)}}},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var r=n.protocol+"//"+n.host,e=r+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var o,i=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?r+i:e+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,