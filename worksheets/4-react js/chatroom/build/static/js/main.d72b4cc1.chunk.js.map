{"version":3,"sources":["LoginPage.js","ChatPage.js","App.js","serviceWorker.js","index.js"],"names":["LoginPage","state","loginOpen","registerOpen","passwordErrorText","usernameErrorText","registerUsernameErrorText","registerEmailErrorText","registerPasswordErrorText","registerReEnterPasswordErrorText","imageFile","registerImage","logged","handleOpen","_this","setState","handleClose","event","refs","loginEmail","getValue","loginPassword","firebase","signInWithEmailAndPassword","then","e","localStorage","setItem","isLoggedHandler","props","catch","error","errorMessage","message","alert","handleRegisterSumbit","registerUsername","registerEmail","registerPassword","registerReEnterPassword","username","backToLogin","createUserWithEmailAndPassword","user","currentUser","ref","child","uid","put","image","getDownloadURL","url","set","profilePicture","register","readImage","imageInput","ext","target","files","type","split","reader","FileReader","onload","this","result","bind","Object","assertThisInitialized","readAsDataURL","document","body","style","backgroundImage","backgroundSize","loginActions","react_default","a","createElement","FlatButton_default","label","primary","keyboardFocused","onClick","registerActions","MuiThemeProvider_default","Dialog_default","title","actions","modal","open","onRequestClose","TextField_default","hintText","floatingLabelText","errorText","display","width","secondary","containerElement","labelPosition","border","accept","onChange","position","opacity","marginBottom","Avatar_default","src","margin","size","React","Component","ChatPage","userListItems","messagesListItems","signOutOpen","currentChat","textbox","deleteOpen","clickedIndex","anchorEl","defaultImage","globeImage","signOut","changeSignOutState","handleDelete","userId","currentTarget","getAttribute","handleDeleteRequestClose","sendMessage","keyStroke","keyCode","push","sent_by","text","deleteMessage","id","remove","changeChat","tempCurrChat","uniqueValueFromTwoStrings","on","snap","messageList","forEach","key","sent_by_username","val","sent_by_id","stringA","stringB","hashedA","sha256","hasbedB","uniqueString","i","length","charCodeAt","toString","updateTextBox","inputEvent","value","scrollToBottom","endOfMessages","scrollIntoView","behavior","_this2","onAuthStateChanged","cUser","targetUser","userList","userProfilePhoto","undefined","_this3","signOutActions","AppBar_default","showMenuIconButton","iconElementRight","IconButton_default","exit_to_app_default","marginRight","verticalAlign","height","overflow","List","map","userid","primaryText","leftAvatar","rightIcon","chat_bubble_default","Divider_default","maxHeight","ownedby","secondaryTextLines","secondaryText","Popover_default","anchorOrigin","horizontal","vertical","targetOrigin","Menu_default","MenuItem_default","borderRadius","onKeyDown","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getItem","isLogged","src_ChatPage","src_LoginPage","Boolean","window","location","hostname","match","console","log","process","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAmXeA,6MA7VbC,MAAQ,CAENC,WAAW,EACXC,cAAc,EAGdC,kBAAmB,GACnBC,kBAAmB,GAGnBC,0BAA2B,GAC3BC,uBAAwB,GACxBC,0BAA2B,GAC3BC,iCAAkC,GAGlCC,UAAW,KAGXC,cAAe,yEAGfC,QAAQ,KAIVC,WAAa,WACXC,EAAKC,SAAS,CAACb,WAAW,OAI5Bc,YAAc,SAACC,GAG2B,KAApCH,EAAKI,KAAKC,WAAWC,WAEvBN,EAAKC,SAAS,CAACV,kBAAmB,2BAIlCS,EAAKC,SAAS,CAACV,kBAAmB,KAGO,KAAvCS,EAAKI,KAAKG,cAAcD,WAE1BN,EAAKC,SAAS,CAACX,kBAAmB,2BAIlCU,EAAKC,SAAS,CAACX,kBAAmB,KAII,KAApCU,EAAKI,KAAKC,WAAWC,YAA4D,KAAvCN,EAAKI,KAAKG,cAAcD,YAGpEE,SAAgBC,2BAA2BT,EAAKI,KAAKC,WAAWC,WAAYN,EAAKI,KAAKG,cAAcD,YAAYI,KAAM,SAACC,GAEnHC,aAAaC,QAAQ,iBAAkB,MAGvCC,EADsBd,EAAKe,MAAMD,iBACjB,OAInBE,MAAM,SAASC,GAEd,IAAIC,EAAeD,EAAME,QACzBC,MAAMF,QAMZG,qBAAuB,SAAClB,GAwCtB,GArC8C,KAA1CH,EAAKI,KAAKkB,iBAAiBhB,WAE7BN,EAAKC,SAAS,CAACT,0BAA2B,2BAI1CQ,EAAKC,SAAS,CAACT,0BAA2B,KAGD,KAAvCQ,EAAKI,KAAKmB,cAAcjB,WAE1BN,EAAKC,SAAS,CAACR,uBAAwB,2BAIvCO,EAAKC,SAAS,CAACR,uBAAwB,KAGK,KAA1CO,EAAKI,KAAKoB,iBAAiBlB,WAE7BN,EAAKC,SAAS,CAACP,0BAA2B,2BAI1CM,EAAKC,SAAS,CAACP,0BAA2B,KAGS,KAAjDM,EAAKI,KAAKqB,wBAAwBnB,WAEpCN,EAAKC,SAAS,CAACN,iCAAkC,2BAIjDK,EAAKC,SAAS,CAACN,iCAAkC,KAIL,KAA1CK,EAAKI,KAAKkB,iBAAiBhB,YAA4D,KAAvCN,EAAKI,KAAKmB,cAAcjB,YAA+D,KAA1CN,EAAKI,KAAKoB,iBAAiBlB,YAAsE,KAAjDN,EAAKI,KAAKqB,wBAAwBnB,WAGjL,GAAIN,EAAKI,KAAKoB,iBAAiBlB,aAAeN,EAAKI,KAAKqB,wBAAwBnB,WAE9EN,EAAKC,SAAS,CAACP,0BAA2B,yBAA0BC,iCAAkC,+BAIxG,CACE,IAAI+B,EAAW1B,EAAKI,KAAKkB,iBAAiBhB,WACtCqB,EAAc3B,EAAK2B,YAGvBnB,SAAgBoB,+BAA+B5B,EAAKI,KAAKmB,cAAcjB,WAAYN,EAAKI,KAAKoB,iBAAiBlB,YAAYI,KAAM,SAACmB,GAE3F,OAAhCrB,SAAgBsB,cAGW,OAAzB9B,EAAKb,MAAMS,UAGbY,YAAmBuB,IAAI,SAASC,MAAMxB,SAAgBsB,YAAYG,KAAKC,IAAIlC,EAAKb,MAAMS,WAAWc,KAAM,SAACyB,GAGtG3B,YAAmBuB,IAAI,SAASC,MAAMxB,SAAgBsB,YAAYG,KAAKG,iBAAiB1B,KAAM,SAAS2B,GAErG7B,aAAoBuB,IAAI,SAAWvB,SAAgBsB,YAAYG,KAAKK,IAAI,CAACZ,SAAUA,EAAUa,eAAgBF,IAAM3B,KAAM,SAACmB,GAGxHF,UAGHX,MAAM,SAASC,GAEhB,IAAIC,EAAeD,EAAME,QACzBC,MAAMF,KAMRV,aAAoBuB,IAAI,SAAWvB,SAAgBsB,YAAYG,KAAKK,IAAI,CAACZ,SAAUA,IAAWhB,KAAM,SAACmB,GAEnGF,MACCX,MAAM,SAASC,GAEhB,IAAIC,EAAeD,EAAME,QACzBC,MAAMF,QAIXF,MAAM,SAASC,GAEhB,IAAIC,EAAeD,EAAME,QACzBC,MAAMF,SAOdsB,SAAW,WACTxC,EAAKC,SAAS,CAACb,WAAW,EAAOC,cAAc,OAGjDsC,YAAc,WACZ3B,EAAKC,SAAS,CAACb,WAAW,EAAMC,cAAc,EAAOQ,cAAe,2DAGtE4C,UAAY,SAACC,GAGX,IAAIC,EAAMD,EAAWE,OAAOC,MAAM,GAAGC,KAAKC,MAAM,KAAK,GAGrD,GAAY,SAARJ,GAA0B,QAARA,GAAyB,QAARA,GAAyB,QAARA,GAAyB,QAARA,GAGvE,GAAID,EAAWE,OAAOC,OAASH,EAAWE,OAAOC,MAAM,GACvD,CACE,IAAIG,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAUvC,GAExBwC,KAAKlD,SAAS,CAACJ,cAAec,EAAEiC,OAAOQ,UACvCC,KAHcC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAtD,KAMhBA,EAAKC,SAAS,CAACL,UAAW8C,EAAWE,OAAOC,MAAM,KAClDG,EAAOQ,cAAcd,EAAWE,OAAOC,MAAM,UAK/CzB,MAAM,uGAORqC,SAASC,KAAKC,MAAMC,gBAAkB,yGACtCH,SAASC,KAAKC,MAAME,eAAiB,QAGrC,IAAMC,EAAe,CACnBC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,MAAM,SACNC,SAAS,EACTC,iBAAiB,EACjBC,QAASnB,KAAKjD,cAEf6D,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACCG,MAAM,WACNC,SAAS,EACTC,iBAAiB,EACjBC,QAASnB,KAAKX,YAKZ+B,EAAkB,CACtBR,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,MAAM,SACNC,SAAS,EACTC,iBAAiB,EACjBC,QAASnB,KAAK9B,uBAEf0C,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACCG,MAAM,OACNC,SAAS,EACTC,iBAAiB,EACjBC,QAASnB,KAAKxB,eAIlB,OACEoC,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KACED,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEU,MAAM,8BACNC,QAASb,EACTc,OAAO,EACPC,KAAM1B,KAAKhE,MAAMC,UACjB0F,eAAgB3B,KAAKjD,YAAYmD,KAAKF,OAGtCY,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEjC,IAAK,aACLiD,SAAS,QACTC,kBAAkB,QAClBC,UAAY/B,KAAKhE,MAAMI,oBACvBwE,EAAAC,EAAAC,cAAA,WAGFF,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEjC,IAAK,gBACLiD,SAAS,WACTC,kBAAkB,WAClBnC,KAAK,WACLoC,UAAY/B,KAAKhE,MAAMG,sBAM9ByE,EAAAC,EAAAC,cAAA,OAAKN,MAAO,CAACwB,QAAS,iBACnBpB,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEU,MAAM,gCACNC,QAASJ,EACTK,OAAO,EACPC,KAAM1B,KAAKhE,MAAME,aACjByF,eAAgB3B,KAAK9B,qBAAqBgC,KAAKF,OAG/CY,EAAAC,EAAAC,cAAA,OAAKN,MAAO,CAACwB,QAAS,eAAgBC,MAAO,QAC3CrB,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEjC,IAAK,mBACLiD,SAAS,WACTC,kBAAkB,WAClBC,UAAY/B,KAAKhE,MAAMK,4BACvBuE,EAAAC,EAAAC,cAAA,WAGFF,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEjC,IAAK,gBACLiD,SAAS,QACTC,kBAAkB,QAClBnC,KAAM,QACNoC,UAAY/B,KAAKhE,MAAMM,yBACvBsE,EAAAC,EAAAC,cAAA,WAGFF,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEjC,IAAK,mBACLiD,SAAS,WACTC,kBAAkB,WAClBnC,KAAK,WACLoC,UAAY/B,KAAKhE,MAAMO,4BACvBqE,EAAAC,EAAAC,cAAA,WAGFF,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEjC,IAAK,0BACLiD,SAAS,oBACTC,kBAAkB,oBAClBnC,KAAK,WACLoC,UAAY/B,KAAKhE,MAAMQ,mCACvBoE,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAGdF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEjC,IAAK,iBACLoC,MAAM,yBACNkB,WAAY,EACZC,iBAAiB,QACjBC,cAAc,OACd5B,MAAO,CAAC6B,OAAQ,cAElBzB,EAAAC,EAAAC,cAAA,SAAOnB,KAAK,OAAO2C,OAAO,4BAA4BC,SAAUvC,KAAKV,UAAUY,KAAKF,MAAOQ,MAAO,CAACgC,SAAS,WAAYC,QAAS,OAKnI7B,EAAAC,EAAAC,cAAA,OAAKN,MAAO,CAACwB,QAAS,eAAgBC,MAAO,MAAOS,aAAc,QAChE9B,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAQ+B,IAAK5C,KAAKhE,MAAMU,cAAe8D,MAAO,CAACqC,OAAQ,SAAUb,QAAS,SAAUc,KAAM,iBAvVhFC,IAAMC,iLCuVfC,6MAtVdjH,MAAQ,CACPkH,cAAe,GACfC,kBAAmB,GACnBC,aAAa,EACbC,YAAa,SACb1E,YAAa,KACb2E,QAAS,GACTC,YAAY,EACZC,aAAc,KAGdC,SAAU,KACVC,aAAc,yEACdC,WAAY,qDAwFbC,QAAU,SAAC5G,GACV,IAAIW,EAAkBd,EAAKe,MAAMD,gBAEjCN,SAAgBuG,UAAUrG,KAAK,WAE5BE,aAAaC,QAAQ,iBAAkB,KACvCC,EAAgB,OAChBE,MAAM,SAASC,GAEX,IAAIC,EAAeD,EAAME,QACzBC,MAAMF,QAKd8F,mBAAqB,YAEW,IAA3BhH,EAAKb,MAAMoH,YAEdvG,EAAKC,SAAS,CAACsG,aAAa,IAI5BvG,EAAKC,SAAS,CAACsG,aAAa,OAK9BU,aAAe,SAAC9G,GAGXH,EAAKb,MAAM2C,YAAYoF,SAAW/G,EAAMgH,cAAcC,aAAa,YAEtEpH,EAAKC,SAAS,CACbyG,YAAY,EAEZE,SAAUzG,EAAMgH,mBAMnBE,yBAA2B,WAC1BrH,EAAKC,SAAS,CACbyG,YAAY,OAKdY,YAAc,SAACC,GAGa,KAAvBvH,EAAKb,MAAMsH,SAAwC,KAAtBc,EAAUC,UAE1ChH,aAAoBuB,IAAI,aAAaC,MAAMhC,EAAKb,MAAMqH,aAAaiB,KAAK,CAACC,QAAS1H,EAAKb,MAAM2C,YAAa6F,KAAM3H,EAAKb,MAAMsH,UAG3HzG,EAAKC,SAAS,CAACwG,QAAS,GAAIG,SAAU,WAKxCgB,cAAgB,SAACzH,GAEhBK,aAAoBuB,IAAI,aAAaC,MAAMhC,EAAKb,MAAMqH,aAAaxE,MAAMhC,EAAKb,MAAMyH,SAASiB,IAAIC,SAEjG9H,EAAKC,SAAS,CACbyG,YAAY,EACZE,SAAU,UAKZmB,WAAa,SAAC5H,GAEb,IAAI6H,EAAe,GAKlBA,EAFkD,OAA/C7H,EAAMgH,cAAcC,aAAa,UAErB,SAKApH,EAAKiI,0BAA0B9H,EAAMgH,cAAcC,aAAa,UAAWpH,EAAKb,MAAM2C,YAAYoF,QAI9F1G,aAAoBuB,IAAI,aAAaC,MAAMgG,GAClDE,GAAG,QAAS,SAAAC,GACvB,IAAIC,EAAc,GAClBD,EAAKE,QAAS,SAASlH,GAEhBiH,EAAYX,KAAK,CAACI,GAAI1G,EAAQmH,IAAKC,iBAAkBpH,EAAQqH,MAAR,QAAyB9G,SAAU+G,WAAYtH,EAAQqH,MAAR,QAAyBtB,OAAQS,KAAMxG,EAAQqH,MAAR,KAAuBrG,MAAOhB,EAAQqH,MAAR,QAAyBjG,mBAGtMvC,EAAKC,SAAS,CAACqG,kBAAmB8B,EAAa5B,YAAawB,SAMlEC,0BAA4B,SAACS,EAASC,GAUrC,IAPA,IAAIC,EAAUC,IAAOH,GACjBI,EAAUD,IAAOF,GAGjBI,EAAe,GAGVC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAInCD,IAAiBH,EAAQM,WAAWF,GAAKF,EAAQI,WAAWF,IAAIG,SAAS,IAG1E,OAAOJ,KAIRK,cAAgB,SAACC,GAEhBrJ,EAAKC,SAAS,CAACwG,QAAS4C,EAAWzG,OAAO0G,WAG3CC,eAAiB,WACfvJ,EAAKI,KAAKoJ,cAAcC,eAAe,CAAEC,SAAU,6FArNrD,IAAAC,EAAAxG,KACC3C,SAAgBoJ,mBAAoB,SAACC,GACnC,GAAIA,EACJ,CACC,IAAIC,EAAa,KACb7H,EAAM,KAEOzB,aAAoBuB,IAAI,UACjCmG,GAAG,QAAS,SAAAC,GACrB,IAAI4B,EAAW,GACf5B,EAAKE,QAAQ,SAACxG,GAGb,GAAIA,EAAKyG,MAAQuB,EAAM5H,IAGtBA,EAAMJ,EAAKyG,IACXwB,EAAajI,EAAK2G,MAClBuB,EAAStC,KAAK,CAAC/F,SAAU,cAAeS,MAAOwH,EAAKxK,MAAM2H,iBAG3D,CACC,IAAIkD,EAAmB,KAGuBA,OAAbC,IAAjCpI,EAAK2G,MAAL,eAAiEmB,EAAKxK,MAAM0H,aAAkChF,EAAK2G,MAAL,eAE9GuB,EAAStC,KAAK,CAAC/F,SAAUG,EAAK2G,MAAL,SAAwBtB,OAAQrF,EAAKyG,IAAKnG,MAAO6H,YAK1CC,IAA9BH,EAAWvH,eAEdoH,EAAK1J,SAAS,CAACoG,cAAe0D,EAAUjI,YAAa,CAACoF,OAAQjF,EAAKP,SAAUoI,EAAWpI,SAAUa,eAAgBoH,EAAKxK,MAAM0H,gBAI7H8C,EAAK1J,SAAS,CAACoG,cAAe0D,EAAUjI,YAAa,CAACoF,OAAQjF,EAAKP,SAAUoI,EAAWpI,SAAUa,eAAgBuH,EAAWvH,oBAK3G/B,aAAoBuB,IAAI,aAAaC,MAAM2H,EAAKxK,MAAMqH,aAC9D0B,GAAG,QAAS,SAAAC,GACvB,IAAIC,EAAc,GAClBD,EAAKE,QAAS,SAASlH,QAG0B8I,IAA5C9I,EAAQqH,MAAR,QAAyBjG,eAE5B6F,EAAYX,KAAK,CAACI,GAAI1G,EAAQmH,IAAKC,iBAAkBpH,EAAQqH,MAAR,QAAyB9G,SAAU+G,WAAYtH,EAAQqH,MAAR,QAAyBtB,OAAQS,KAAMxG,EAAQqH,MAAR,KAAuBrG,MAAOgB,KAAKhE,MAAM0H,eAI9KuB,EAAYX,KAAK,CAACI,GAAI1G,EAAQmH,IAAKC,iBAAkBpH,EAAQqH,MAAR,QAAyB9G,SAAU+G,WAAYtH,EAAQqH,MAAR,QAAyBtB,OAAQS,KAAMxG,EAAQqH,MAAR,KAAuBrG,MAAOhB,EAAQqH,MAAR,QAAyBjG,mBAKvMoH,EAAK1J,SAAS,CAACqG,kBAAmB8B,WAOpCuB,EAAK5C,yDAQoB,OAAxB5D,KAAKhE,MAAMyH,UAEdzD,KAAKoG,kDA2IC,IAAAW,EAAA/G,KAEPM,SAASC,KAAKC,MAAMC,gBAAkB,KACnCH,SAASC,KAAKC,MAAME,eAAiB,KAGxC,IAAMsG,EAAiB,CAClBpG,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,MAAM,MACNC,SAAS,EACTC,iBAAiB,EACjBC,QAASnB,KAAK4D,UAEfhD,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACCG,MAAM,QACNC,SAAS,EACTC,iBAAiB,EACjBC,QAASnB,KAAK6D,sBAIlB,OACCjD,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KACCD,EAAAC,EAAAC,cAACmG,EAAApG,EAAD,CACKU,MAAM,0BACN2F,oBAAoB,EACpBC,iBAAmBvG,EAAAC,EAAAC,cAACsG,EAAAvG,EAAD,CAAYM,QAAUnB,KAAK6D,oBAAoBjD,EAAAC,EAAAC,cAACuG,EAAAxG,EAAD,SAClED,EAAAC,EAAAC,cAAA,WAEFF,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACIU,MAAM,qCACNC,QAASwF,EACTvF,OAAO,EACPC,KAAM1B,KAAKhE,MAAMoH,cAGrBxC,EAAAC,EAAAC,cAAA,OAAKN,MAAO,CAACyB,MAAO,SACnBrB,EAAAC,EAAAC,cAAA,OAAKN,MAAO,CAACwB,QAAS,eAAgBK,OAAQ,iBAAkBJ,MAAO,MAAOqF,YAAa,KAAMC,cAAe,MAAOC,OAAQ,OAAQC,SAAU,SAChJ7G,EAAAC,EAAAC,cAAC4G,EAAA,KAAD,KAGH1H,KAAKhE,MAAMkH,cAAcyE,IAAI,SAAAjJ,GAAI,OACjCkC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4G,EAAA,SAAD,CACEE,OAASlJ,EAAKqF,OACd8D,YAAanJ,EAAKH,SAClBuJ,WAAYlH,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAQ+B,IAAKlE,EAAKM,QAC9B+I,UAAWnH,EAAAC,EAAAC,cAACkH,EAAAnH,EAAD,MACXM,QAAU4F,EAAKnC,aAEjBhE,EAAAC,EAAAC,cAACmH,EAAApH,EAAD,WAMAD,EAAAC,EAAAC,cAAA,OAAKN,MAAO,CAACwB,QAAS,eAAgBK,OAAQ,iBAAkBJ,MAAO,MAAOsF,cAAe,MAAOC,OAAQ,SAC3G5G,EAAAC,EAAAC,cAAA,OAAKlC,IAAK,iBAAiB4B,MAAO,CAAC0H,UAAW,OAAQV,OAAQ,OAAQC,SAAU,SAC/E7G,EAAAC,EAAAC,cAAC4G,EAAA,KAAD,KAGH1H,KAAKhE,MAAMmH,kBAAkBwE,IAAI,SAAA3J,GAAO,OACvC4C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4G,EAAA,SAAD,CACChD,GAAK1G,EAAQ0G,GACbyD,QAAUnK,EAAQsH,WACrBnE,QAAU4F,EAAKjD,aACfsE,mBAAqB,EAClBP,YAAa7J,EAAQoH,iBACrBiD,cAAerK,EAAQwG,KACvBsD,WAAYlH,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAQ+B,IAAK5E,EAAQgB,UAErC4B,EAAAC,EAAAC,cAACwH,EAAAzH,EAAD,CACOa,KAAMqF,EAAK/K,MAAMuH,WACjBE,SAAUsD,EAAK/K,MAAMyH,SACrB8E,aAAc,CAACC,WAAY,OAAQC,SAAU,OAC7CC,aAAc,CAACF,WAAY,OAAQC,SAAU,UAC7C9G,eAAgBoF,EAAK7C,0BAC3BtD,EAAAC,EAAAC,cAAC6H,EAAA9H,EAAD,KACCD,EAAAC,EAAAC,cAAC8H,EAAA/H,EAAD,CAAUgH,YAAY,SAAS1G,QAAS4F,EAAKtC,kBAG5C7D,EAAAC,EAAAC,cAACmH,EAAApH,EAAD,SAILD,EAAAC,EAAAC,cAAA,OAAKlC,IAAI,oBAILgC,EAAAC,EAAAC,cAAA,OAAKN,MAAO,CAACyB,MAAO,OAAQuF,OAAQ,QACnC5G,EAAAC,EAAAC,cAAA,OAAKN,MAAO,CAACqC,OAAQ,KAAMZ,MAAO,MAAOI,OAAQ,sBAAuBwG,aAAc,OAAQ7G,QAAS,eAAgByF,SAAU,WACtI7G,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACCsF,MAAQnG,KAAKhE,MAAMsH,QACnBzB,SAAS,kBACTrB,MAAO,CAACyB,MAAO,MAAOY,OAAQ,MAC9BiG,UAAW9I,KAAKmE,YAChB5B,SAAUvC,KAAKiG,4BA7UDlD,IAAMC,WCqBd+F,cAjCb,SAAAA,IACA,IAAAlM,EAAA,OAAAsD,OAAA6I,EAAA,EAAA7I,CAAAH,KAAA+I,IACElM,EAAAsD,OAAA8I,EAAA,EAAA9I,CAAAH,KAAAG,OAAA+I,EAAA,EAAA/I,CAAA4I,GAAAI,KAAAnJ,QAGKrC,gBAAkBd,EAAKc,gBAAgBuC,KAArBC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAtD,KAGvBA,EAAKb,MAAQ,CACXW,OAAQc,aAAa2L,QAAQ,mBARjCvM,+EAagBwM,GAEdrJ,KAAKlD,SAAS,CAACH,OAAQ0M,qCAKvB,MAA0B,MAAtBrJ,KAAKhE,MAAMW,OAENiE,EAAAC,EAAAC,cAACwI,EAAD,CAAU3L,gBAAkBqC,KAAKrC,kBAKjCiD,EAAAC,EAAAC,cAACyI,EAAD,CAAW5L,gBAAkBqC,KAAKrC,yBA9B7BoF,IAAMC,WCQJwG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHNC,QAAQC,IAAIC,2CAEZ1M,gBAXa,CACT2M,OAAQD,0CACRE,WAAYF,iCACZG,YAAaH,wCACbI,UAAWJ,iBACXK,cAAeL,6BACfM,kBAAmBN,iBAOvBO,IAASC,OAAO3J,EAAAC,EAAAC,cAAC0J,EAAD,MAASlK,SAASmK,eAAe,SD8G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrN,KAAK,SAAAsN,GACjCA,EAAaC","file":"static/js/main.d72b4cc1.chunk.js","sourcesContent":["import React from 'react';\r\nimport Dialog from 'material-ui/Dialog';\r\nimport FlatButton from 'material-ui/FlatButton';\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\r\nimport * as firebase from 'firebase';\r\nimport TextField from 'material-ui/TextField';\r\nimport Avatar from 'material-ui/Avatar';\r\n\r\n/* \r\n\r\nThe ability to register and log in with profile photos is my extra feature\r\n\r\nAuthentication is also involved\r\n\r\nUsers can choose a profile photo and it is reflected in the chat room\r\n\r\n*/\r\n\r\n\r\nclass LoginPage extends React.Component\r\n{\r\n  //state information for the login page\r\n  state = {\r\n    //boolean variables for if the user is on the login page or the register page\r\n    loginOpen: true,\r\n    registerOpen: false,\r\n\r\n    //error text for the login screen input\r\n    passwordErrorText: \"\",\r\n    usernameErrorText: \"\",\r\n\r\n    //error text for the register screen input\r\n    registerUsernameErrorText: \"\",\r\n    registerEmailErrorText: \"\",\r\n    registerPasswordErrorText: \"\",\r\n    registerReEnterPasswordErrorText: \"\",\r\n\r\n    //currently selected profile image file\r\n    imageFile: null,\r\n\r\n    //link to current image selected image, initially the default user profile image\r\n    registerImage: \"https://www.qualiscare.com/wp-content/uploads/2017/08/default-user.png\",\r\n\r\n    //if the user has logged in or not\r\n    logged: false,\r\n  };\r\n\r\n  //changes the login page state to true which opens the login page\r\n  handleOpen = () => {\r\n    this.setState({loginOpen: true});\r\n  };\r\n\r\n  //method that runs when the user enters in their login details\r\n  handleClose = (event) => {\r\n\r\n    //if the values are empty, change the error text for the respective fields\r\n    if (this.refs.loginEmail.getValue() === \"\")\r\n    {\r\n      this.setState({usernameErrorText: \"This field is required\"});\r\n    }\r\n    else\r\n    {\r\n      this.setState({usernameErrorText: \"\"});\r\n    }\r\n\r\n    if (this.refs.loginPassword.getValue() === \"\")\r\n    {\r\n      this.setState({passwordErrorText: \"This field is required\"});\r\n    }\r\n    else\r\n    {\r\n      this.setState({passwordErrorText: \"\"});\r\n    }\r\n\r\n    //log in user, ensure values are not empty\r\n    if (this.refs.loginEmail.getValue() !== \"\" && this.refs.loginPassword.getValue() !== \"\")\r\n    {\r\n      //use google authentication sign in with email and password\r\n      firebase.auth().signInWithEmailAndPassword(this.refs.loginEmail.getValue(), this.refs.loginPassword.getValue()).then( (e) => {\r\n          //set the local storage (cookies) to the value 1 (aka the user has logged in)\r\n          localStorage.setItem('chatRoomLogged', '1');\r\n          //assign and call the login handler from App.js\r\n          let isLoggedHandler = this.props.isLoggedHandler;\r\n          isLoggedHandler('1');\r\n        }\r\n      )\r\n      //catch any sign in error\r\n      .catch(function(error)\r\n      {\r\n        let errorMessage = error.message;\r\n        alert(errorMessage);\r\n      });\r\n    }\r\n  };\r\n\r\n  //method to handle the register submit\r\n  handleRegisterSumbit = (event) => {\r\n\r\n    //set error texts for required fields\r\n    if (this.refs.registerUsername.getValue() === \"\")\r\n    {\r\n      this.setState({registerUsernameErrorText: \"This field is required\"});\r\n    }\r\n    else\r\n    {\r\n      this.setState({registerUsernameErrorText: \"\"});\r\n    }\r\n\r\n    if (this.refs.registerEmail.getValue() === \"\")\r\n    {\r\n      this.setState({registerEmailErrorText: \"This field is required\"});\r\n    }\r\n    else\r\n    {\r\n      this.setState({registerEmailErrorText: \"\"});\r\n    }\r\n\r\n    if (this.refs.registerPassword.getValue() === \"\")\r\n    {\r\n      this.setState({registerPasswordErrorText: \"This field is required\"});\r\n    }\r\n    else\r\n    {\r\n      this.setState({registerPasswordErrorText: \"\"});\r\n    }\r\n\r\n    if (this.refs.registerReEnterPassword.getValue() === \"\")\r\n    {\r\n      this.setState({registerReEnterPasswordErrorText: \"This field is required\"});\r\n    }\r\n    else\r\n    {\r\n      this.setState({registerReEnterPasswordErrorText: \"\"});\r\n    }\r\n\r\n    //if all values filled in\r\n    if (this.refs.registerUsername.getValue() !== \"\" && this.refs.registerEmail.getValue() !== \"\" && this.refs.registerPassword.getValue() !== \"\" && this.refs.registerReEnterPassword.getValue() !== \"\")\r\n    {\r\n      //passwords do not match\r\n      if (this.refs.registerPassword.getValue() !== this.refs.registerReEnterPassword.getValue())\r\n      {\r\n        this.setState({registerPasswordErrorText: \"Passwords do not Match\", registerReEnterPasswordErrorText: \"Passwords do not Match\"});\r\n      }\r\n      //if they do\r\n      else\r\n      {\r\n        let username = this.refs.registerUsername.getValue();\r\n        let backToLogin = this.backToLogin;\r\n\r\n        //use fireabse authentication to create a valid user using the email and password\r\n        firebase.auth().createUserWithEmailAndPassword(this.refs.registerEmail.getValue(), this.refs.registerPassword.getValue()).then( (user) =>\r\n        {\r\n          if (firebase.auth().currentUser !== null)\r\n          {\r\n            //if the user chose their own profile image\r\n            if (this.state.imageFile !== null)\r\n            {\r\n              //store image to firebase storage then store username and image url to firebase realtime database\r\n              firebase.storage().ref('users').child(firebase.auth().currentUser.uid).put(this.state.imageFile).then( (image) =>\r\n              {\r\n                //add profile image url to firebase for quick access\r\n                firebase.storage().ref('users').child(firebase.auth().currentUser.uid).getDownloadURL().then( function(url)\r\n                {\r\n                  firebase.database().ref('users/' + firebase.auth().currentUser.uid).set({username: username, profilePicture: url}).then( (user) =>\r\n                  {\r\n                    //return to login page\r\n                    backToLogin();\r\n                  });\r\n                });\r\n              }).catch(function(error)\r\n              {\r\n                let errorMessage = error.message;\r\n                alert(errorMessage);\r\n              });\r\n            }\r\n            else\r\n            {\r\n              //if they didnt not chose their own profile image\r\n              firebase.database().ref('users/' + firebase.auth().currentUser.uid).set({username: username}).then( (user) =>\r\n              {\r\n                backToLogin();\r\n              }).catch(function(error)\r\n              {\r\n                let errorMessage = error.message;\r\n                alert(errorMessage);\r\n              });\r\n            }\r\n          }\r\n        }).catch(function(error)\r\n        {\r\n          let errorMessage = error.message;\r\n          alert(errorMessage);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  //method to switch the screen to the register screen from the login screen\r\n  register = () => {\r\n    this.setState({loginOpen: false, registerOpen: true});\r\n  };\r\n\r\n  backToLogin = () => {\r\n    this.setState({loginOpen: true, registerOpen: false, registerImage: \"http://popwrapped.com/images/default/user-blank.png\"});\r\n  };\r\n\r\n  readImage = (imageInput) => {\r\n\r\n    //get file extension\r\n    let ext = imageInput.target.files[0].type.split(\"/\")[1];\r\n\r\n    //check file extension is an image\r\n    if (ext === \"jpeg\" || ext === \"jpg\" || ext === \"png\" || ext === \"svg\" || ext === \"bmp\")\r\n    {\r\n      //if there is files and there is at least one file, then read in image and set the state for a register image\r\n      if (imageInput.target.files && imageInput.target.files[0])\r\n      {\r\n        let reader = new FileReader();\r\n        reader.onload = function (e)\r\n        {\r\n          this.setState({registerImage: e.target.result});\r\n        }.bind(this);\r\n\r\n        //set the state for the file input\r\n        this.setState({imageFile: imageInput.target.files[0]});\r\n        reader.readAsDataURL(imageInput.target.files[0]);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      alert(\"This is not a valid Image!\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n\r\n    //set background image\r\n    document.body.style.backgroundImage = 'url(\\'https://66.media.tumblr.com/c8614a53f5abccf81835671a62cde02a/tumblr_opy8alC1rj1u25kiio1_500.gif\\')';\r\n    document.body.style.backgroundSize = 'cover';\r\n\r\n    //buttons for login and register\r\n    const loginActions = [\r\n      <FlatButton\r\n        label=\"Log In\"\r\n        primary={true}\r\n        keyboardFocused={true}\r\n        onClick={this.handleClose}\r\n      />,\r\n       <FlatButton\r\n        label=\"Register\"\r\n        primary={true}\r\n        keyboardFocused={true}\r\n        onClick={this.register}\r\n      />,\r\n    ];\r\n\r\n    //buttons for register\r\n    const registerActions = [\r\n      <FlatButton\r\n        label=\"Submit\"\r\n        primary={true}\r\n        keyboardFocused={true}\r\n        onClick={this.handleRegisterSumbit}\r\n      />,\r\n       <FlatButton\r\n        label=\"Back\"\r\n        primary={true}\r\n        keyboardFocused={true}\r\n        onClick={this.backToLogin}\r\n      />,\r\n    ]\r\n\r\n    return (\r\n      <MuiThemeProvider>\r\n        <div>\r\n        {/*show login inputs in a dialog*/}\r\n          <Dialog\r\n            title=\"Log In to Join the ChatRoom\"\r\n            actions={loginActions}\r\n            modal={false}\r\n            open={this.state.loginOpen}\r\n            onRequestClose={this.handleClose.bind(this)}>\r\n\r\n            {/*text field for email input*/}\r\n            <TextField\r\n              ref= \"loginEmail\"\r\n              hintText=\"Email\"\r\n              floatingLabelText=\"Email\"\r\n              errorText= {this.state.usernameErrorText}\r\n            /><br />\r\n\r\n            {/*text field for password input*/}\r\n            <TextField\r\n              ref= \"loginPassword\"\r\n              hintText=\"Password\"\r\n              floatingLabelText=\"Password\"\r\n              type=\"password\"\r\n              errorText= {this.state.passwordErrorText}\r\n            />\r\n          </Dialog>\r\n       </div>\r\n\r\n       {/*dialog for register data input*/}\r\n       <div style={{display: 'inline-block'}}>\r\n          <Dialog\r\n            title=\"Register for the the ChatRoom\"\r\n            actions={registerActions}\r\n            modal={false}\r\n            open={this.state.registerOpen}\r\n            onRequestClose={this.handleRegisterSumbit.bind(this)}>\r\n\r\n            {/*input field for username*/}\r\n            <div style={{display: 'inline-block', width: '50%'}}>\r\n              <TextField\r\n                ref= \"registerUsername\"\r\n                hintText=\"Username\"\r\n                floatingLabelText=\"Username\"\r\n                errorText= {this.state.registerUsernameErrorText}\r\n              /><br />\r\n\r\n              {/*input field for email*/}\r\n              <TextField\r\n                ref= \"registerEmail\"\r\n                hintText=\"Email\"\r\n                floatingLabelText=\"Email\"\r\n                type= \"email\"\r\n                errorText= {this.state.registerEmailErrorText}\r\n              /><br />\r\n\r\n              {/*input field for password*/}\r\n              <TextField\r\n                ref= \"registerPassword\"\r\n                hintText=\"Password\"\r\n                floatingLabelText=\"Password\"\r\n                type=\"password\"\r\n                errorText= {this.state.registerPasswordErrorText}\r\n              /><br />\r\n\r\n              {/*input field for re entered password*/}\r\n              <TextField\r\n                ref= \"registerReEnterPassword\"\r\n                hintText=\"Re-Enter Password\"\r\n                floatingLabelText=\"Re-Enter Password\"\r\n                type=\"password\"\r\n                errorText= {this.state.registerReEnterPasswordErrorText}\r\n              /><br /><br /><br />\r\n\r\n              {/*button for chosing profile picture*/}\r\n              <FlatButton\r\n                ref= \"profilePicture\"\r\n                label=\"Choose a Profile Image\"\r\n                secondary= {true}\r\n                containerElement=\"label\"\r\n                labelPosition=\"left\"\r\n                style={{border: '1px solid'}}\r\n              >\r\n              <input type=\"file\" accept=\".jpg,.png,.bmp,.jpeg,.svg\" onChange={this.readImage.bind(this)} style={{position:'absolute', opacity: 0}} />\r\n             </FlatButton>\r\n            </div>\r\n\r\n              {/*div for the chosen profile picture*/}\r\n            <div style={{display: 'inline-block', width: \"50%\", marginBottom: '5em'}}>\r\n              <Avatar src={this.state.registerImage} style={{margin: '0 auto', display: 'block'}} size={200}/>\r\n            </div>\r\n          </Dialog>\r\n       </div>\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\nimport AppBar from 'material-ui/AppBar';\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\r\nimport Dialog from 'material-ui/Dialog';\r\nimport IconButton from 'material-ui/IconButton';\r\nimport {List, ListItem} from 'material-ui/List';\r\nimport ActionExitToApp from 'material-ui/svg-icons/action/exit-to-app';\r\nimport FlatButton from 'material-ui/FlatButton';\r\nimport * as firebase from 'firebase';\r\nimport Avatar from 'material-ui/Avatar';\r\nimport Divider from 'material-ui/Divider';\r\nimport TextField from 'material-ui/TextField';\r\nimport CommunicationChatBubble from 'material-ui/svg-icons/communication/chat-bubble';\r\nimport Popover from 'material-ui/Popover';\r\nimport Menu from 'material-ui/Menu';\r\nimport MenuItem from 'material-ui/MenuItem';\r\nimport sha256 from 'js-sha256';\r\n\r\nclass ChatPage extends React.Component\r\n{\r\n\tstate = {\r\n\t\tuserListItems: [],\r\n\t\tmessagesListItems: [],\r\n\t\tsignOutOpen: false,\r\n\t\tcurrentChat: 'global',\r\n\t\tcurrentUser: null,\r\n\t\ttextbox: \"\",\r\n\t\tdeleteOpen: false,\r\n\t\tclickedIndex: null,\r\n\t\t//this is the element in the message list that the user has clicked on, if it is null,\r\n\t\t//the list will scroll to the bottom, if not then the list will remain 'focused' on that message\r\n\t\tanchorEl: null,\r\n\t\tdefaultImage: \"https://www.qualiscare.com/wp-content/uploads/2017/08/default-user.png\",\r\n\t\tglobeImage: \"http://pngimg.com/uploads/globe/globe_PNG33.png\"\r\n\t};\r\n\r\n\t//when the component is mounted, check the authorization for the user and load the users and the messages\r\n  componentDidMount()\r\n\t{\r\n\t\tfirebase.auth().onAuthStateChanged( (cUser) => {\r\n\t\t  if (cUser)\r\n\t\t  {\r\n\t\t  \tlet targetUser = null;\r\n\t\t  \tlet uid = null;\r\n\r\n\t\t  \tconst usersRef = firebase.database().ref('users/');\r\n\t\t\t\tusersRef.on('value', snap => {\r\n\t\t\t\tlet userList = [];\r\n\t\t\t\tsnap.forEach((user) =>\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\tif (user.key === cUser.uid)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//if the user returned is the current user, the change its profile card to be the Global Chat\r\n\t\t\t\t\t\tuid = user.key;\r\n\t\t\t\t\t\ttargetUser = user.val();\r\n\t\t\t\t\t\tuserList.push({username: 'Global Chat', image: this.state.globeImage});\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet userProfilePhoto = null\r\n\r\n\t\t\t\t\t\t//if the user does not have a profile picture then use the default profile picture\r\n\t\t\t\t\t\tuser.val()['profilePicture'] === undefined ?  userProfilePhoto = this.state.defaultImage : userProfilePhoto = user.val()['profilePicture'];\r\n\r\n\t\t\t\t\t\tuserList.push({username: user.val()['username'], userId: user.key, image: userProfilePhoto});\r\n\t\t\t\t\t}\r\n\t\t   \t\t});\r\n\r\n\t\t\t\t//if the current signed in user's profile picture is undefined, then set it to the default profile picture\r\n\t\t\t\tif (targetUser.profilePicture === undefined)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.setState({userListItems: userList, currentUser: {userId: uid, username: targetUser.username, profilePicture: this.state.defaultImage}});\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.setState({userListItems: userList, currentUser: {userId: uid, username: targetUser.username, profilePicture: targetUser.profilePicture}});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t//load messages\r\n\t\t\tconst messagesRef = firebase.database().ref('messages/').child(this.state.currentChat);\r\n\t\t\tmessagesRef.on('value', snap => {\r\n\t\t\t\tlet messageList = [];\r\n\t\t\t\tsnap.forEach( function(message)\r\n\t\t\t\t{\r\n\t\t\t\t\t//if the person who sent the message has no profile picture, then set it to the default image\r\n\t\t\t\t\tif (message.val()['sent_by'].profilePicture === undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmessageList.push({id: message.key, sent_by_username: message.val()['sent_by'].username, sent_by_id: message.val()['sent_by'].userId, text: message.val()['text'], image: this.state.defaultImage});\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t        \t\tmessageList.push({id: message.key, sent_by_username: message.val()['sent_by'].username, sent_by_id: message.val()['sent_by'].userId, text: message.val()['text'], image: message.val()['sent_by'].profilePicture});\r\n\t\t\t\t\t}\r\n\t\t   \t\t});\r\n\r\n\r\n\t\t   \t\tthis.setState({messagesListItems: messageList});\r\n\t\t\t});\r\n\r\n\t\t  }\r\n\t\t\t// if user is not authenticated then sign user out\r\n\t\t  else\r\n\t\t  {\r\n\t\t  \tthis.signOut();\r\n\t\t  }\r\n\t\t});\r\n\t};\r\n\r\n\t//if the screen changes and the anchor element is null, then scroll to the bottom of them list\r\n\tcomponentDidUpdate()\r\n\t{\r\n\t\tif (this.state.anchorEl === null)\r\n\t\t{\r\n\t\t\tthis.scrollToBottom();\r\n\t\t}\r\n\t};\r\n\r\n\t//sign out functionality, sign out user using google auth, then user the isLoggedHandler from App.js to log out the user\r\n\t//and brign them to the log in screen\r\n\tsignOut = (event) => {\r\n\t\tlet isLoggedHandler = this.props.isLoggedHandler;\r\n\r\n\t\tfirebase.auth().signOut().then(function()\r\n\t\t{\r\n\t\t   localStorage.setItem('chatRoomLogged', '0');\r\n\t\t   isLoggedHandler('0');\r\n\t\t}).catch(function(error)\r\n\t\t{\r\n\t        let errorMessage = error.message;\r\n\t        alert(errorMessage);\r\n\t\t});\r\n\t};\r\n\r\n\t//change the sign out state in the application\r\n\tchangeSignOutState = () =>\r\n\t{\r\n\t\tif (this.state.signOutOpen === false)\r\n\t\t{\r\n\t\t\tthis.setState({signOutOpen: true});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.setState({signOutOpen: false});\r\n\t\t}\r\n\t};\r\n\r\n\t//handle the delete of a message\r\n\thandleDelete = (event) => {\r\n\r\n\t\t//if the current user owns this message, then open the delete pop up\r\n\t\tif (this.state.currentUser.userId === event.currentTarget.getAttribute('ownedby'))\r\n\t\t{\r\n\t\t\tthis.setState({\r\n\t\t\t\tdeleteOpen: true,\r\n\t\t\t\t//set the anchor the current message\r\n\t\t\t\tanchorEl: event.currentTarget,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t//close the delete pop up\r\n\thandleDeleteRequestClose = () => {\r\n\t\tthis.setState({\r\n\t\t\tdeleteOpen: false,\r\n\t\t});\r\n\t};\r\n\r\n\t//function for handling when a user enters a message\r\n\tsendMessage = (keyStroke) =>\r\n\t{\r\n\t\t//if the text input box is not empty, and the user has pressed the 'enter' key\r\n\t\tif (this.state.textbox !== \"\" && keyStroke.keyCode === 13)\r\n\t\t{\r\n\t\t\tfirebase.database().ref('messages/').child(this.state.currentChat).push({sent_by: this.state.currentUser, text: this.state.textbox});\r\n\r\n\t\t\t//empty the text input box and set the anchor element to null, which will cause the message list to scroll to the latest message\r\n\t\t\tthis.setState({textbox: \"\", anchorEl: null});\r\n\t\t}\r\n\t};\r\n\r\n\t//actually delete the mesage from the database\r\n\tdeleteMessage = (event) =>\r\n\t{\r\n\t\tfirebase.database().ref('messages/').child(this.state.currentChat).child(this.state.anchorEl.id).remove();\r\n\r\n\t\tthis.setState({\r\n\t\t\tdeleteOpen: false,\r\n\t\t\tanchorEl: null,\r\n\t\t});\r\n\t};\r\n\r\n\t//function to switch chats\r\n\tchangeChat = (event) =>\r\n\t{\r\n\t\tlet tempCurrChat = \"\";\r\n\r\n\t\t//if the user clicked has no ID, then its the global chat\r\n\t\tif (event.currentTarget.getAttribute('userid') === null)\r\n\t\t{\r\n\t\t\ttempCurrChat = \"global\";\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t//get the unique chat ID from the two userIds\r\n\t\t\ttempCurrChat = this.uniqueValueFromTwoStrings(event.currentTarget.getAttribute('userid'), this.state.currentUser.userId);\r\n\t\t}\r\n\r\n\t\t//get the messages from the two users\r\n\t\tconst messagesRef = firebase.database().ref('messages/').child(tempCurrChat);\r\n\t\t\tmessagesRef.on('value', snap => {\r\n\t\t\t\tlet messageList = [];\r\n\t\t\t\tsnap.forEach( function(message)\r\n\t\t\t\t{\r\n\t\t        \tmessageList.push({id: message.key, sent_by_username: message.val()['sent_by'].username, sent_by_id: message.val()['sent_by'].userId, text: message.val()['text'], image: message.val()['sent_by'].profilePicture});\r\n\t\t   \t\t});\r\n\r\n\t\t   \t\tthis.setState({messagesListItems: messageList, currentChat: tempCurrChat});\r\n\t\t\t});\r\n\t};\r\n\r\n\t//function to create a unique ID that will be the same regardless of string order\r\n\t//this is because the messages between userA and userB will access the same node, but need to be able to calculate the node ID at runtime\r\n\tuniqueValueFromTwoStrings = (stringA, stringB) =>\r\n\t{\r\n\t\t//to create this ID, we use a hashing algorithm to hash both user IDs to avoid the possibility of creating a duplicate id\r\n\t\tlet hashedA = sha256(stringA);\r\n\t\tlet hasbedB = sha256(stringB);\r\n\r\n\t\t//string to store the final id\r\n\t\tlet uniqueString = \"\";\r\n\r\n\t\t//loop through any hashed key, as the sha256 algorithm produces the same length string\r\n\t\tfor (let i = 0; i < hashedA.length; i++)\r\n\t\t{\r\n\t\t\t//get char code of the char at index i, add them, then convert it to hexidecimal and concatonate it to the ID string\r\n\t\t\t//this creates a unique number based on their values, and converting it to hexidecimal is not really required, but a hex string adds a small extra layer of security to the ID\r\n\t\t\tuniqueString += (hashedA.charCodeAt(i) + hasbedB.charCodeAt(i)).toString(16);\r\n\t\t}\r\n\r\n\t\treturn uniqueString;\r\n\t};\r\n\r\n\t//updates the state of the textbox when text has been entered by the user\r\n\tupdateTextBox = (inputEvent) =>\r\n\t{\r\n\t\tthis.setState({textbox: inputEvent.target.value});\r\n\t};\r\n\r\n\tscrollToBottom = () => {\r\n\t  this.refs.endOfMessages.scrollIntoView({ behavior: \"auto\" });\r\n\t}\r\n\r\n\trender(){\r\n\t\t//remove the background gif that was seen in the login screen\r\n\t\tdocument.body.style.backgroundImage = null;\r\n    \tdocument.body.style.backgroundSize = null;\r\n\r\n    \t//actions for the sign out dialog\r\n\t\tconst signOutActions = [\r\n\t      <FlatButton\r\n\t        label=\"YES\"\r\n\t        primary={true}\r\n\t        keyboardFocused={true}\r\n\t        onClick={this.signOut}\r\n\t      />,\r\n\t       <FlatButton\r\n\t        label=\"NOPE!\"\r\n\t        primary={true}\r\n\t        keyboardFocused={true}\r\n\t        onClick={this.changeSignOutState}\r\n\t      />,\r\n\t    ]\r\n\r\n\t    return (\r\n\t    \t<MuiThemeProvider>\r\n\t\t    \t<AppBar\r\n\t\t          title='Welcome to the ChatRoom'\r\n\t\t          showMenuIconButton={false}\r\n\t\t          iconElementRight= {<IconButton onClick= {this.changeSignOutState}><ActionExitToApp/></IconButton>}\r\n\t\t        /><br/>\r\n\r\n\t\t        <Dialog\r\n\t\t            title=\"Are You Sure You Want to Sign Out?\"\r\n\t\t            actions={signOutActions}\r\n\t\t            modal={false}\r\n\t\t            open={this.state.signOutOpen}>\r\n\t\t        </Dialog>\r\n\r\n\t\t       \t<div style={{width: '100%'}} >\r\n\t\t\t        <div style={{display: 'inline-block', border: '2px solid grey', width: '30%', marginRight: '2%', verticalAlign: 'top', height: '80vh', overflow: 'auto'}}>\r\n\t\t\t\t        <List>\r\n\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t  \t//dynamically create the list of users\r\n\t\t\t\t\t\t  \tthis.state.userListItems.map(user =>\r\n\t\t\t\t\t\t  \t<div>\r\n\t\t\t\t\t\t\t    <ListItem\r\n\t\t\t\t\t\t\t      userid= {user.userId}\r\n\t\t\t\t\t\t\t      primaryText={user.username}\r\n\t\t\t\t\t\t\t      leftAvatar={<Avatar src={user.image} />}\r\n\t\t\t\t\t\t\t      rightIcon={<CommunicationChatBubble />}\r\n\t\t\t\t\t\t\t      onClick= {this.changeChat}\r\n\t\t\t\t\t\t\t    />\r\n\t\t\t\t\t\t\t    <Divider />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t  )}\r\n\t\t\t\t\t\t</List>\r\n\t\t\t        </div>\r\n\r\n\t\t\t        <div style={{display: 'inline-block', border: '2px solid grey', width: '65%', verticalAlign: 'top', height: '80vh'}}>\r\n\t\t\t        \t<div ref= \"globalMessages\" style={{maxHeight: '65vh', height: '65vh', overflow: 'auto'}}>\r\n\t\t\t\t        \t<List>\r\n\t\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t  \t//dynamically create the list of messages\r\n\t\t\t\t\t\t\t  \tthis.state.messagesListItems.map(message =>\r\n\t\t\t\t\t\t\t\t  \t<div>\r\n\t\t\t\t\t\t\t\t\t    <ListItem\r\n\t\t\t\t\t\t\t\t\t    \tid= {message.id}\r\n\t\t\t\t\t\t\t\t\t    \townedby= {message.sent_by_id}\r\n\t\t\t\t\t\t\t\t\t\t\tonClick= {this.handleDelete}\r\n\t\t\t\t\t\t\t\t\t\t\tsecondaryTextLines= {2}\r\n\t\t\t\t\t\t\t\t\t\t    primaryText={message.sent_by_username}\r\n\t\t\t\t\t\t\t\t\t\t    secondaryText={message.text}\r\n\t\t\t\t\t\t\t\t\t\t    leftAvatar={<Avatar src={message.image} />}\r\n\t\t\t\t\t\t\t\t\t    />\r\n\t\t\t\t\t\t\t\t\t\t<Popover\r\n\t\t\t\t\t\t\t\t\t        open={this.state.deleteOpen}\r\n\t\t\t\t\t\t\t\t\t        anchorEl={this.state.anchorEl}\r\n\t\t\t\t\t\t\t\t\t        anchorOrigin={{horizontal: 'left', vertical: 'top'}}\r\n\t\t\t\t\t\t\t\t\t        targetOrigin={{horizontal: 'left', vertical: 'bottom'}}\r\n\t\t\t\t\t\t\t\t\t        onRequestClose={this.handleDeleteRequestClose}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Menu>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem primaryText=\"Delete\" onClick={this.deleteMessage}/>\r\n\t\t\t\t\t\t\t\t\t\t\t</Menu>\r\n\t\t\t\t\t\t\t\t\t\t</Popover>\r\n\t\t\t\t\t\t\t\t\t    <Divider />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t  \t)\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t <div ref='endOfMessages'>\r\n\t\t\t\t\t\t     </div>\r\n\t\t\t\t\t\t\t</List>\r\n\t\t\t        \t</div>\r\n\t\t\t        \t<div style={{width: '100%', height: '15%'}}>\r\n\t\t\t\t        \t<div style={{margin: '1%', width: '89%', border: '2px solid lightgrey', borderRadius: '25px', display: 'inline-block', overflow: 'hidden'}}>\r\n\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\tvalue= {this.state.textbox}\r\n\t\t\t\t\t\t\t\t\thintText=\"Enter a Message\"\r\n\t\t\t\t\t\t\t\t\tstyle={{width: '95%', margin: '1%'}}\r\n\t\t\t\t\t\t\t\t\tonKeyDown={this.sendMessage}\r\n\t\t\t\t\t\t\t\t\tonChange={this.updateTextBox}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t        </div>\r\n\t\t\t    </div>\r\n\t        </MuiThemeProvider>\r\n\t    )\r\n  }\r\n}\r\n\r\nexport default ChatPage;\r\n","import React from 'react';\nimport LoginPage from './LoginPage'\nimport ChatPage from './ChatPage'\n\nclass App extends React.Component\n{\n  constructor()\n  {\n    super();\n\n    //this will bind the login handler, which will allow it to be passed into sub components\n    this.isLoggedHandler = this.isLoggedHandler.bind(this);\n\n    //change the log state depending on the local storage\n    this.state = {\n      logged: localStorage.getItem('chatRoomLogged'),\n    };\n  }\n\n  //method to set the log in state depeding on the parameter\n  isLoggedHandler(isLogged)\n  {\n    this.setState({logged: isLogged});\n  }\n\n  render(){\n    //if the user is already logged in, send them to the chat page\n    if (this.state.logged === '1')\n    {\n      return <ChatPage isLoggedHandler= {this.isLoggedHandler}></ChatPage>\n    }\n    //if the user is not logged in, bring them to the login page\n    else\n    {\n      return <LoginPage isLoggedHandler= {this.isLoggedHandler}></LoginPage>\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\nvar config = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID\n};\n\nconsole.log(process.env.REACT_APP_FIREBASE_API_KEY);\n\nfirebase.initializeApp(config);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}